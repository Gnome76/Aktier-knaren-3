import streamlit as st
import pandas as pd

st.set_page_config(page_title="AktierÃ¤knaren", layout="wide")

DATA_FILE = "aktier.csv"

def load_data():
    try:
        return pd.read_csv(DATA_FILE)
    except FileNotFoundError:
        return pd.DataFrame(columns=[
            "Bolagsnamn", "Nuvarande Kurs", 
            "P/E 1", "P/E 2", "P/E 3", "P/E 4", "P/E 5",
            "P/S 1", "P/S 2", "P/S 3", "P/S 4", "P/S 5",
            "Vinst i Ã¥r", "Vinst nÃ¤sta Ã¥r", 
            "OmsÃ¤ttningstillvÃ¤xt i Ã¥r", "OmsÃ¤ttningstillvÃ¤xt nÃ¤sta Ã¥r",
            "Targetkurs", "UndervÃ¤rdering (%)", "KÃ¶p vid -30%", "KÃ¶p vid -40%"
        ])

def save_data(df):
    df.to_csv(DATA_FILE, index=False)

def berÃ¤kna_targetkurs(pe_list, ps_list, vinst_Ã¥r, vinst_nÃ¤sta_Ã¥r, oms_tillv_Ã¥r, oms_tillv_nÃ¤sta_Ã¥r):
    pe_median = pd.Series(pe_list).median()
    ps_median = pd.Series(ps_list).median()
    snitt_vinst = (vinst_Ã¥r + vinst_nÃ¤sta_Ã¥r) / 2
    snitt_omsÃ¤ttningstillvÃ¤xt = (oms_tillv_Ã¥r + oms_tillv_nÃ¤sta_Ã¥r) / 2

    target_pe = pe_median * snitt_vinst
    target_ps = ps_median * (snitt_vinst * (1 + snitt_omsÃ¤ttningstillvÃ¤xt / 100))

    return round((target_pe + target_ps) / 2, 2)

df = load_data()

if "new_entry" not in st.session_state:
    st.session_state.new_entry = False

if st.sidebar.button("âž• LÃ¤gg till nytt bolag"):
    st.session_state.new_entry = True

selected = None
data = None
if not st.session_state.new_entry and not df.empty:
    selected = st.sidebar.selectbox("VÃ¤lj ett bolag att visa/redigera", df["Bolagsnamn"].sort_values())
    if selected:
        data = df[df["Bolagsnamn"] == selected].iloc[0]

if selected:
    st.subheader(f"Redigera bolag: {selected}")
else:
    st.subheader("LÃ¤gg till nytt bolag")

bolagsnamn = st.text_input("Bolagsnamn", value=data["Bolagsnamn"] if data is not None else "")
kurs = st.number_input("Nuvarande Kurs", value=data["Nuvarande Kurs"] if data is not None else 0.0, step=0.1)

pe_values = [st.number_input(f"P/E {i+1}", value=data[f"P/E {i+1}"] if data is not None else 0.0, step=0.1) for i in range(5)]
ps_values = [st.number_input(f"P/S {i+1}", value=data[f"P/S {i+1}"] if data is not None else 0.0, step=0.1) for i in range(5)]

vinst_Ã¥r = st.number_input("Vinst i Ã¥r (kr/aktie)", value=data["Vinst i Ã¥r"] if data is not None else 0.0, step=0.1)
vinst_nÃ¤sta_Ã¥r = st.number_input("Vinst nÃ¤sta Ã¥r (kr/aktie)", value=data["Vinst nÃ¤sta Ã¥r"] if data is not None else 0.0, step=0.1)
oms_Ã¥r = st.number_input("OmsÃ¤ttningstillvÃ¤xt i Ã¥r (%)", value=data["OmsÃ¤ttningstillvÃ¤xt i Ã¥r"] if data is not None else 0.0, step=0.1)
oms_nÃ¤sta_Ã¥r = st.number_input("OmsÃ¤ttningstillvÃ¤xt nÃ¤sta Ã¥r (%)", value=data["OmsÃ¤ttningstillvÃ¤xt nÃ¤sta Ã¥r"] if data is not None else 0.0, step=0.1)

if st.button("ðŸ’¾ Spara & BerÃ¤kna"):
    target = berÃ¤kna_targetkurs(pe_values, ps_values, vinst_Ã¥r, vinst_nÃ¤sta_Ã¥r, oms_Ã¥r, oms_nÃ¤sta_Ã¥r)
    undervÃ¤rdering = round((1 - kurs / target) * 100, 2)
    kÃ¶p_30 = round(target * 0.7, 2)
    kÃ¶p_40 = round(target * 0.6, 2)

    ny_data = {
        "Bolagsnamn": bolagsnamn,
        "Nuvarande Kurs": kurs,
        "Vinst i Ã¥r": vinst_Ã¥r,
        "Vinst nÃ¤sta Ã¥r": vinst_nÃ¤sta_Ã¥r,
        "OmsÃ¤ttningstillvÃ¤xt i Ã¥r": oms_Ã¥r,
        "OmsÃ¤ttningstillvÃ¤xt nÃ¤sta Ã¥r": oms_nÃ¤sta_Ã¥r,
        "Targetkurs": target,
        "UndervÃ¤rdering (%)": undervÃ¤rdering,
        "KÃ¶p vid -30%": kÃ¶p_30,
        "KÃ¶p vid -40%": kÃ¶p_40,
    }
    for i in range(5):
        ny_data[f"P/E {i+1}"] = pe_values[i]
        ny_data[f"P/S {i+1}"] = ps_values[i]

    df = df[df["Bolagsnamn"] != bolagsnamn]
    df = pd.concat([df, pd.DataFrame([ny_data])], ignore_index=True)
    df = df.sort_values("Bolagsnamn")
    save_data(df)
    st.success(f"{bolagsnamn} sparades!")
    st.session_state.new_entry = False

if not df.empty:
    st.subheader("ðŸ“Š Sparade bolag")
    filter_option = st.selectbox("Filtrera undervÃ¤rderade bolag", ["Visa alla", "UndervÃ¤rderade 30-39,99%", "UndervÃ¤rderade >40%"])
    if filter_option == "UndervÃ¤rderade 30-39,99%":
        visning = df[(df["UndervÃ¤rdering (%)"] >= 30) & (df["UndervÃ¤rdering (%)"] < 40)]
    elif filter_option == "UndervÃ¤rderade >40%":
        visning = df[df["UndervÃ¤rdering (%)"] >= 40]
    else:
        visning = df

    bolag_lista = visning["Bolagsnamn"].tolist()
    valt_bolag = st.selectbox("VÃ¤lj bolag fÃ¶r att visa nyckeltal", bolag_lista)
    if valt_bolag:
        st.dataframe(visning[visning["Bolagsnamn"] == valt_bolag])

    if selected:
        if st.button("ðŸ—‘ Ta bort bolaget"):
            df = df[df["Bolagsnamn"] != selected]
            save_data(df)
            st.success(f"{selected} togs bort.")
